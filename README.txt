Current State:

Website is currently using a csv file of a subset of the data which is uploaded
to the Observable site. There is code currently commented out in the HTML file
which can insert our data from a csv file on PythonAnywhere, however its
formatting currentlly does not work. Getting data directly from the database to
the obsrvable JavaScript code is tricky. Additionally, we are using this method
as a showcase because we don't currently have a good way of searching through
the entire dataset (>100000 entries). Ideally, I beleive the solution would be
to implement our own search box and have it execute SQL querries, which would
then update the data, but there is no time to implement this solution.

A lot of this round-about data transfer is due to the fact that PythonAnywhere
and Observable don't seem to play nice together. Observable can display data on
remote sites in 2 ways: 1) either make the project public and embed their tools
in your page or 2) download the JavaScript files and fenangle them yourself.
These JavaScript files are also poorly formatted for human readability.

Option 1 looks the best, but relies on remote data. This can supposedly be
circumvented by linking your database directly to Observable, but
PythonAnwywhere only allows this behavior if you use ssh. Observable does not
allow you to use ssh. So, Option 2 results in you having to do a bunch of
wrestling with JavaScript manually, doesnt look as nice because you would need
to insert their css formatting but only make it affect the Observable part of
the webpage, and still seems to require making a temporary .csv file (or at
least it makes it difficult to pass the return of a database query back to the
Observable JavaScript code.)


Here are some additions that could be made to the project:
1) additional fields could be captured from the NVD database,
2) additional sources of information could be captured,
3) implementing the fixes to the display issues above or finding an alternative
to Observable.
4) allow the data collector to update database entries to avoid duplicate
entries.


Notes:
1) Updating anything on the Observable site requires a new export and
    replacement of the <iframe> link in main_page.html OR a new download and
    replacement of the JavaScript project files (mysite/templates/observable).
    The project can be forked like a github page for future edits by other people.
2) Any changes to project files other than main_page.html require a reload of
    our site (via Web tab on PythonAnywhere).
3) Method for reinitializing database detailed in comments in mysite/update.py
4) The PythonAnywhere file browser GUI is pretty awful, so use a bash console.


Useful Links:
1) The website: https://bcicap.pythonanywhere.com/
2) Observable: https://observablehq.com/@6b82222bf75362df/nvd-vulnerabilities
3) GitHub: https://github.com/rogebrya/ICS_Vulnerability_Scraper
4) Tutorial for main implementation on PythonAnywhere: https://blog.pythonanywhere.com/121/
5) Followup PythonAnywhere tutorial (not implemented): https://blog.pythonanywhere.com/158/
6) Tutorial for replacing Observable data: https://towardsdatascience.com/using-an-observablehq-plot-in-javascript-with-your-own-data-5eabeb6224f5
7) NVD Development Guide: https://nvd.nist.gov/developers/vulnerabilities


File Info:
ICS_Vulnerability_Scraper/flask_app.py - The main program file; connects to
    database, serves up HTML page based on HTML requests, defines database tables.
ICS_Vulnerability_Scraper/update.py - Connects and makes requests for data to
    NVD database through their API, saves data to our MySQL database, defines
    nvdDate class, ensures there are less than 100 API requsts per minute. This
    program fills the database and runs on a schedule to keep the database updated.
ICS_Vulnerability_Scraper/config.py - Provides connection info for our database
    and the NVD API. Meant to keep this information secret. (NOTE: DO NOT UPLOAD THIS FILE TO GITHUB)
ICS_Vulnerability_Scraper/make_json.py - Connects to our database, makes a query
    (returns dictionary), converts the data to JSON format, saves it to file:
    data.json
ICS_Vulnerability_Scraper/json_to_csv.py - Opens JSON file, converts it to csv
    format, and adds header information (column titles).
ICS_Vulnerability_Scraper/data.json - JSON data file created from database by
    make_json.py
ICS_Vulnerability_Scraper/data_file.csv - csv data file created from JSON file
    by json_to_csv.py
ICS_Vulnerability_Scraper/templates/main_page.html - HTML code of our web page.
    Observable page is embedded via <iframe>. Includes code for local data use
    in comments (still csv file). Also includes mandatory NVD disclaimer.
ICS_Vulnerability_Scraper/templates/observable - Contains all Observable
    JavaScript code.

