from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy
import requests

app = Flask(__name__)
app.config["DEBUG"] = True


# Our database connection
SQLALCHEMY_DATABASE_URI = "mysql+mysqlconnector://{username}:{password}@{hostname}/{databasename}".format(
    username="BCIcap",
    password="SQuirr3L",
    hostname="BCIcap.mysql.pythonanywhere-services.com",
    databasename="BCIcap$VulnData",
)
app.config["SQLALCHEMY_DATABASE_URI"] = SQLALCHEMY_DATABASE_URI
app.config["SQLALCHEMY_POOL_RECYCLE"] = 299
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False


db = SQLAlchemy(app)


# Code used by original template
"""
class Comment(db.Model):

    __tablename__ = "comments"

    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.String(4096))
"""
# provides information for Database table initialization
class Vulnerability(db.Model):

    __tablename__ = "vulnerabilities"

    id = db.Column(db.Integer, primary_key=True)
    cveID = db.Column(db.String(4096))
    vulnDdescription = db.Column(db.String(4096))
    cvssV3score = db.Column(db.String(4096))
    publishedDate = db.Column(db.String(4096))


if Vulnerability.query.first() == None:
    print("empty")

    #NVD API querry
    NVD_api_url = "https://services.nvd.nist.gov/rest/json/cves/1.0/"
    NVD_api_key = "?apiKey=45e4addc-5818-445f-83b0-8e77d5594d2a"
    #Currently set to gather all vulnerabilities between 2/1/22 and 2/4/22
    #Date format:
    #yyyy-MM-ddTHH:mm:ss:SSS Z
    #Z = -7 for MDT
    NVD_start_date = "&pubStartDate=2022-02-01T00:00:00:000 UTC%2D07:00"
    NVD_end_date = "&pubEndDate=2022-02-04T00:00:00:000 UTC%2D07:00"
    response = requests.get(NVD_api_url+NVD_api_key+NVD_start_date+NVD_end_date)
    data = response.json()["result"]["CVE_Items"]
    
    # Turns API request data into Vulnerabilities
    for cve in data:
        vulnerability = Vulnerability(
            cveID = cve["cve"]["CVE_data_meta"]["ID"],
            vulnDdescription = cve["cve"]["description"]["description_data"][0]["value"],
            cvssV3score = cve["impact"]["baseMetricV3"]["impactScore"],
            publishedDate = cve["publishedDate"]
        )
        db.session.add(vulnerability)
    db.session.commit()     # Saves vulnerabilities to database
else:
    print("g")

# Tells HTML.GET reqests what webpage to render and sends data from database to it.
@app.route("/", methods=["GET"])
def index():
    return render_template("main_page.html", vulnerabilities=Vulnerability.query.all())


# Code used by original template
"""
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "GET":
        return render_template("main_page.html", comments=Comment.query.all())

    comment = Comment(content=request.form["contents"])
    db.session.add(comment)
    db.session.commit()
    return redirect(url_for('index'))
"""
