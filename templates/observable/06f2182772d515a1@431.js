function _1(md){return(
md`# NVD Vulnerabilities`
)}

function _search(Inputs,data){return(
Inputs.search(data)
)}

function _dataTable(Inputs,search,md,wordWrap,cvssColor){return(
Inputs.table(search, {
  rows: 25,
  format: {
    CVE: x => md`${x}`,
    Description: x => wordWrap(x),
    CVSS: x => x.toFixed(1),
    CVSS: x => cvssColor(x),
    Date: x => md`${x}`,
  },
  width: {
    CVE: "9%",
    Description: "45%",
    CVSS: "10%",
    Date: "36%"
  },
  align: {
    CVE: "center",
    Description: "center",
    CVSS: "center",
    Date: "center"
  }
})
)}

function _chart(Histogram,data,width){return(
Histogram(data, {
  value: d => d.CVSS,
  label: "CVSS Score",
  width,
  height: 500,
  color: "steelblue"
})
)}

function _data(FileAttachment){return(
FileAttachment("Trial WS1.csv").csv({typed: true})
)}

function _wordWrap(DOM,createSVGtext){return(
function wordWrap(x){
  const svg = DOM.svg(500,x.length/2.5);
  svg.appendChild(
    createSVGtext({text:x, x:20,y:20})
  )
  
  return svg;
}
)}

function _cvssColor(md,d3){return(
function cvssColor(x){
    const p = md`**${x}**`;
    p.wordwrap = true
    p.style.background = d3.interpolateRainbow((10-x) / 10);
  return p;
}
)}

function _createSVGtext(){return(
function createSVGtext(config = {}) {

  let {text, x = 0, y = 0, 
       fontSize = 14, fill = '#333', 
       textAnchor = "left", 
       maxCharsPerLine = 65, 
       lineHeight = 1.3} = config;

  if (typeof config == "string") text = config;

  let svgText = document.createElementNS('http://www.w3.org/2000/svg', 'text');
  svgText.setAttributeNS(null, 'x', x);
  svgText.setAttributeNS(null, 'y', y);
  svgText.setAttributeNS(null, 'font-size', fontSize);
  svgText.setAttributeNS(null, 'fill', fill);         
  svgText.setAttributeNS(null, 'text-anchor', textAnchor);   

  let words = text.trim().split(/\s+/).reverse(),
  word, 
  dy = 0, 
  lineNumber = 0,
  line = [];

  while(word = words.pop()) {

    line.push(word);
    let testLineLength = line.join(" ").length;

    if (testLineLength > maxCharsPerLine){
      line.pop();
      
      let svgTSpan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');
      svgTSpan.setAttributeNS(null, 'x', x);
      svgTSpan.setAttributeNS(null, 'dy', dy + "em");

      let tSpanTextNode = document.createTextNode(line.join(" "));
      svgTSpan.appendChild(tSpanTextNode);
      svgText.appendChild(svgTSpan);

      line = [word];
      dy = lineHeight;
    }
  }
  
    let svgTSpan = document.createElementNS('http://www.w3.org/2000/svg', 'tspan')
    svgTSpan.setAttributeNS(null, 'x', x);
    svgTSpan.setAttributeNS(null, 'dy', dy + "em");

    let tSpanTextNode = document.createTextNode(line.join(" "));
    svgTSpan.appendChild(tSpanTextNode);
    svgText.appendChild(svgTSpan);

  return svgText;
}
)}

function _Histogram(d3){return(
function Histogram(data, {
  value = d => d, // convenience alias for x
  domain, // convenience alias for xDomain
  label, // convenience alias for xLabel
  format, // convenience alias for xFormat
  type = d3.scaleLinear, // convenience alias for xType
  x = value, // given d in data, returns the (quantitative) x-value
  y = () => 1, // given d in data, returns the (quantitative) weight
  thresholds = 40, // approximate number of bins to generate, or threshold function
  normalize, // whether to normalize values to a total of 100%
  marginTop = 20, // top margin, in pixels
  marginRight = 30, // right margin, in pixels
  marginBottom = 30, // bottom margin, in pixels
  marginLeft = 40, // left margin, in pixels
  width = 640, // outer width of chart, in pixels
  height = 400, // outer height of chart, in pixels
  insetLeft = 0.5, // inset left edge of bar
  insetRight = 0.5, // inset right edge of bar
  xType = type, // type of x-scale
  xDomain = domain, // [xmin, xmax]
  xRange = [marginLeft, width - marginRight], // [left, right]
  xLabel = label, // a label for the x-axis
  xFormat = format, // a format specifier string for the x-axis
  yType = d3.scaleLinear, // type of y-scale
  yDomain, // [ymin, ymax]
  yRange = [height - marginBottom, marginTop], // [bottom, top]
  yLabel = "↑ Frequency", // a label for the y-axis
  yFormat = normalize ? "%" : undefined, // a format specifier string for the y-axis
  color = "currentColor" // bar fill color
} = {}) {
  // Compute values.
  const X = d3.map(data, x);
  const Y0 = d3.map(data, y);
  const I = d3.range(X.length);

  // Compute bins.
  const bins = d3.bin().thresholds(thresholds).value(i => X[i])(I);
  const Y = Array.from(bins, I => d3.sum(I, i => Y0[i]));
  if (normalize) {
    const total = d3.sum(Y);
    for (let i = 0; i < Y.length; ++i) Y[i] /= total;
  }

  // Compute default domains.
  if (xDomain === undefined) xDomain = [bins[0].x0, bins[bins.length - 1].x1];
  if (yDomain === undefined) yDomain = [0, d3.max(Y)];

  // Construct scales and axes.
  const xScale = xType(xDomain, xRange);
  const yScale = yType(yDomain, yRange);
  const xAxis = d3.axisBottom(xScale).ticks(width / 80, xFormat).tickSizeOuter(0);
  const yAxis = d3.axisLeft(yScale).ticks(height / 40, yFormat);
  yFormat = yScale.tickFormat(100, yFormat);

  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto; height: intrinsic;");

  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(yAxis)
      .call(g => g.select(".domain").remove())
      .call(g => g.selectAll(".tick line").clone()
          .attr("x2", width - marginLeft - marginRight)
          .attr("stroke-opacity", 0.1))
      .call(g => g.append("text")
          .attr("x", -marginLeft)
          .attr("y", 10)
          .attr("fill", "currentColor")
          .attr("text-anchor", "start")
          .text(yLabel));

  svg.append("g")
      .attr("fill", color)
    .selectAll("rect")
    .data(bins)
    .join("rect")
      .attr("x", d => xScale(d.x0) + insetLeft)
      .attr("width", d => Math.max(0, xScale(d.x1) - xScale(d.x0) - insetLeft - insetRight))
      .attr("y", (d, i) => yScale(Y[i]))
      .attr("height", (d, i) => yScale(0) - yScale(Y[i]))
    .append("title")
      .text((d, i) => [`${d.x0} ≤ x < ${d.x1}`, yFormat(Y[i])].join("\n"));

  svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(xAxis)
      .call(g => g.append("text")
          .attr("x", width - marginRight)
          .attr("y", 27)
          .attr("fill", "currentColor")
          .attr("text-anchor", "end")
          .text(xLabel));

  return svg.node();
}
)}

export default function define(runtime, observer) {
  const main = runtime.module();
  const fileAttachments = new Map([["Trial WS1.csv",new URL("./files/e094165a40ee45478c7ab8d51ae5fc976b3a20d78dc6c60cf98c72cc566af53959c7c7269242e3a79c6cb971aaf6ec0da662a281206f6db47a060b7c3074ff31",import.meta.url)]]);
  main.builtin("FileAttachment", runtime.fileAttachments(name => fileAttachments.get(name)));
  main.variable(observer()).define(["md"], _1);
  main.variable(observer("viewof search")).define("viewof search", ["Inputs","data"], _search);
  main.variable(observer("search")).define("search", ["Generators", "viewof search"], (G, _) => G.input(_));
  main.variable(observer("dataTable")).define("dataTable", ["Inputs","search","md","wordWrap","cvssColor"], _dataTable);
  main.variable(observer("chart")).define("chart", ["Histogram","data","width"], _chart);
  main.variable(observer("data")).define("data", ["FileAttachment"], _data);
  main.variable(observer("wordWrap")).define("wordWrap", ["DOM","createSVGtext"], _wordWrap);
  main.variable(observer("cvssColor")).define("cvssColor", ["md","d3"], _cvssColor);
  main.variable(observer("createSVGtext")).define("createSVGtext", _createSVGtext);
  main.variable(observer("Histogram")).define("Histogram", ["d3"], _Histogram);
  return main;
}
