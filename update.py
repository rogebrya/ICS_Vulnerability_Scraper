# To reset database:
#* Open MySQL console,
# drop table vulnerabilities;
# *Open bash console,
# *navigate to same folder as "flask_app.py"
# ipython3.6
# from flask_app import db
# db.create_all()
# exit

from flask_app import db, Vulnerability
import requests
import time
import pickle


class nvdDate:
    # Example date: 2022-01-01T00:00:00:000 UTC%2D07:00
    year:str = ""
    month:str = ""
    day:str = ""
    hour:str = ""
    minute:str = ""
    second:str = ""
    millisec:str = ""

    def __init__(self, year, month, day, hour, minute, second, millisec):
        self.year = year
        self.month = month
        self.day = day
        self.hour = hour
        self.minute = minute
        self.second = second
        self.millisec = millisec

    def AddMonth(self):
        intMonth = int(self.month)
        if intMonth < 12:
            intMonth+=1
        else:
            intMonth = 0
        if intMonth <= 10:
            self.month = "0" + str(intMonth)
        else:
            self.month = str(intMonth)

    def ToString(self):
        return self.year + "-" + self.month + "-" + self.day + "T" + self.hour + ":" + self.minute + ":" + self.second + ":" + self.millisec + " UTC%2D07:00"

resultsPerPage = 1000
index = 0
numOfResults = resultsPerPage

try:
    pickleString = open("lastDate.txt", "w")
    startingDate = pickle.load("lastDate.txt")
    pickleString.close()
finally:
    startingDate = nvdDate("1988","09","10","00","00","00","000")

while numOfResults == resultsPerPage:

    endingDate = nvdDate(startingDate.year,startingDate.month,startingDate.day,startingDate.hour,startingDate.minute,startingDate.second,startingDate.millisec)
    endingDate.AddMonth()
    while index < numOfResults:
        # NVD API querry
        NVD_api_url = nvdInfo.nvdAPIurl
        NVD_api_key = nvdInfo.nvdAPIkey
        NVD_resultsPerPage = "&resultsPerPage=" + str(resultsPerPage)
        NVD_startIndex = "&startIndex=" + str(index)
        # Date format:
        # yyyy-MM-ddTHH:mm:ss:SSS Z
        # Z = -7 for MDT
        #NVD_start_date = "&pubStartDate=2022-01-01T00:00:00:000 UTC%2D07:00"
        #NVD_end_date = "&pubEndDate=2022-02-01T00:00:00:000 UTC%2D07:00"
        # response = requests.get(NVD_api_url+NVD_api_key+NVD_start_date+NVD_end_date)
        NVD_start_date = "&pubStartDate=" + startingDate.ToString()
        NVD_end_date = "&pubEndDate=" + endingDate.ToString()

        response = requests.get(NVD_api_url+NVD_api_key+NVD_start_date+NVD_end_date+NVD_resultsPerPage)
        data = response.json()["result"]["CVE_Items"]

        numOfResults = response.json()["totalResults"]
        index+= response.json()["resultsPerPage"]

        # Turns API request data into Vulnerabilities
        for cve in data:
            vulnerability = Vulnerability(
                cveID = cve["cve"]["CVE_data_meta"]["ID"],
                vulnDescription = cve["cve"]["description"]["description_data"][0]["value"],
                cvssV3score = cve["impact"]["baseMetricV3"]["impactScore"],
                publishedDate = cve["publishedDate"]
            )
            #print(vulnerability.cveID)
            db.session.add(vulnerability)
        db.session.commit()     # Saves vulnerabilities to database

        print(numOfResults)
        print(index)
        time.sleep(1)
    startingDate = endingDate

pickleString = pickle.dumps(startingDate)
pickleString = open("lastDate.txt", "w")
pickleString.write(pickleString)
pickleString.close()